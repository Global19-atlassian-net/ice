package org.eclipse.ice.tests.dev.annotations.processors;

import static org.junit.jupiter.api.Assertions.*;

import org.eclipse.ice.dev.annotations.processors.Field;
import org.eclipse.ice.dev.annotations.processors.Field.FieldBuilder;
import org.junit.jupiter.api.Test;

/**
 * Tests for FieldBuilder class.
 *
 * Methods generated by Lombok not tested.
 * @author Daniel Bluhm
 */
class FieldBuilderTest {

	@Test
	void testTypeNonPrimitive() {
		FieldBuilder builder = Field.builder();
		Field f;

		// Class<?> non-primitive
		builder.type(String.class);
		f = builder.build();
		assertEquals("java.lang.String", f.getType());
		assertFalse(f.isPrimitive());
	}

	@Test
	void testTypePrimitive() {
		FieldBuilder builder = Field.builder();
		Field f;

		// Class<?> primitive
		builder.type(int.class);
		f = builder.build();
		assertEquals("int", f.getType());
		assertTrue(f.isPrimitive());
	}

	@Test
	void testTypeRaw() {
		FieldBuilder builder = Field.builder();
		Field f;

		// Raw
		builder.type("java.util.Date");
		f = builder.build();
		assertEquals("java.util.Date", f.getType());
		// While Dates are not primitive values, because the type is set
		// as a raw value, the builder will not set whether the type
		// is primitive or not; that must be manually specified
		// when using Raw.
		assertFalse(f.isPrimitive());
	}

	@Test
	void testTypeRawFake() {
		FieldBuilder builder = Field.builder();
		Field f;

		builder = Field.builder();
		// Raw - not a real class
		builder.type("Asdf");
		f = builder.build();
		assertEquals("Asdf", f.getType());
		assertFalse(f.isPrimitive());
	}

	@Test
	void testGuessTypeFromStringPrimitive() {
		FieldBuilder builder = Field.builder();
		Field f;

		// Guess primitive
		builder.type("int");
		f = builder.build();
		assertEquals("int", f.getType());
		assertTrue(f.isPrimitive());
	}

	@Test
	void testGuessTypeFromStringNonPrimitive() {
		FieldBuilder builder = Field.builder();
		Field f;

		// Guess non-primitive
		builder.type("String");
		f = builder.build();
		assertEquals("java.lang.String", f.getType());
		assertFalse(f.isPrimitive());
	}

	@Test
	void testGuessTypeFromStringNonPrimitiveOutsideOfLang() {
		FieldBuilder builder = Field.builder();
		Field f;

		// Guess non-primitive
		builder.type("java.util.Date");
		f = builder.build();
		assertEquals("java.util.Date", f.getType());
		assertFalse(f.isPrimitive());
	}
}
