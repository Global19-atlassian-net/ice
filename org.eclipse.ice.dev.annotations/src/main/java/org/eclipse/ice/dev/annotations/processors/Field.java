package org.eclipse.ice.dev.annotations.processors;

import lombok.Builder;
import lombok.Data;
import lombok.NonNull;

/**
 * Container for Field information, taken from DataField Annotations, in
 * simplified form for use by Velocity template.
 *
 * @author Daniel Bluhm
 */
@Data
@Builder
public class Field {
	/**
	 * Name of the field.
	 */
	String name;

	/**
	 * String representation of the field's type.
	 */
	String type;

	/**
	 * The default value of this field.
	 */
	String defaultValue;

	/**
	 * Whether or not this field can be null.
	 *
	 * This value affects the kind of checks generated in IDataElement.matches().
	 */
	boolean nullable;

	/**
	 * Whether or not the type of this field is a primitive type.
	 *
	 * This value affects the kind of checks generated in IDataElement.matches().
	 * This is inferred from the Field's type.
	 */
	boolean primitive;

	/**
	 * Whether or not this field should be included in IDataElement.matches().
	 */
	@Builder.Default boolean match = true;

	/**
	 * Builder class for Field. This class must be a static inner class of Field in
	 * order to take advantage of Lombok's @Builder annotation. The methods defined
	 * here replace the defaults generated by Lombok.
	 */
	public static class FieldBuilder {
		/**
		 * Format long as String for use as default value initializer.
		 * @param value the value to be formatted.
		 * @return FieldBuilder
		 */
		public FieldBuilder defaultValue(long value) {
			this.defaultValue = Long.toString(value) + "L";
			return this;
		}

		/**
		 * Format String as escaped String for use as default value initializer.
		 * @param value the value to be formatted.
		 * @return FieldBuilder
		 */
		public FieldBuilder defaultValue(String value) {
			this.defaultValue = "\"" + value + "\"";
			return this;
		}

		/**
		 * Format boolean as String for use as default value initializer.
		 * @param value the value to be formatted.
		 * @return FieldBuilder
		 */
		public FieldBuilder defaultValue(boolean value) {
			this.defaultValue = Boolean.toString(value);
			return this;
		}

		/**
		 * Take a Raw string value and pass through without manipulating for use as
		 * default value initializer.
		 * @param value the value to be formatted.
		 * @return FieldBuilder
		 */
		public FieldBuilder defaultValue(Raw value) {
			this.defaultValue = value.getValue();
			return this;
		}

		/**
		 * Format type as String.
		 * @param type the type to be formatted.
		 * @return
		 */
		public FieldBuilder type(Class<?> type) {
			this.type = type.getName().toString();
			this.primitive = type.isPrimitive();
			return this;
		}

		/**
		 * Take a raw string value and pass through without manipulating for use as
		 * type.
		 * @param type the type
		 * @return
		 */
		public FieldBuilder type(Raw type) {
			this.type = type.getValue();
			return this;
		}
	}

	/**
	 * Marker class used to mark a string value as one that should not be
	 * manipulated when building a field.
	 */
	@Data public static class Raw {
		@NonNull String value;
	}

	/**
	 * Convenience method for creating Raw value.
	 * @param value
	 * @return
	 */
	public static Raw raw(String value) {
		return new Raw(value);
	}
}