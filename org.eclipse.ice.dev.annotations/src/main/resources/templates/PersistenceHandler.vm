## Declarations
#set($interface = "IPersistenceHandler")
##
#if($package)
package $package;
#end

import java.util.Map;
import java.util.UUID;

import org.bson.Document;
import org.eclipse.ice.dev.annotations.IDataElement;
import org.eclipse.ice.dev.annotations.IPersistenceHandler;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;

public class $class implements $interface {

	/**
	 * The name of the collection backing this PersistenceHandler.
	 */
	private final static String COLLECTION = "$collection";

	/**
	 * The collection in which implementations of $elementInterface will be stored.
	 */
	private MongoCollection<Document> collection;

	/**
	 * Convert values from Document to $implementation using mapper.
	 */
	private ObjectMapper mapper = new ObjectMapper();

	public $class(MongoDatabase db) {
		this.collection = db.getCollection(COLLECTION);
	}

	@Override
	public <T extends IDataElement> void save(T element) throws Exception {
		this.collection.insertOne(new Document(element.asMap()));
	}
	
	@Override
	public <T extends IDataElement> Iterable<T> find() throws Exception {
		return this.collection.find()
			.map(doc -> new ${implementation}().fromJSON(doc));
	}

	@Override
	public long clear() throws Exception {
		long count = this.collection.count();
		this.collection.drop();
		return count;
	}

	#macro(findmethod $var $type $docName)
	#if(${var.Getter} && ${var.Search})
	#if(${var.Unique})

	/**
	 * Find $elementInterface by ${var.Name}.
	 * @param ${var.Name}
	 * @return found element or null
	 */
	#if(${var.DefaultField})
	@Override
	#end
	public <T extends IDataElement> T findBy${var.NameForMethod}($type ${var.Name}) throws Exception {
		Document doc = this.collection
			.find(Filters.eq("${docName}", ${var.Name}))
			.first();
		if (doc == null) {
			return null;
		}

		$elementInterface element = new ${implementation}().fromJSON(doc);
		return (T) element;
	}
	#else

	/**
	 * Find $elementInterface by ${var.Name}.
	 * @param ${var.Name}
	 * @return Iterator of results
	 */
	#if(${var.DefaultField})
	@Override
	#end
	public <T extends IDataElement> Iterable<T> findBy${var.NameForMethod}(${var.Type} ${var.Name}) throws Exception {
		return this.collection.find(Filters.eq("${var.Name}", ${var.Name}))
			.map(doc -> new ${implementation}().fromJSON(doc));
	}
	#end
	#end
	#end
	#foreach($field in $fields)
	#findmethod($field ${field.Type} ${field.Name})
	#foreach($alias in $field.Aliases)
	#findmethod($alias ${field.Type} ${field.Name})
	#end
	#end
}