import {css, customElement, html, LitElement, property, TemplateResult} from 'lit-element';
import '@vaadin/vaadin-text-field';
import '@vaadin/vaadin-checkbox';
import { Person } from './Person';
import { DataElement } from './data-element';

/**
 * Tasks:
 * *This class should be templated or take a function call back in place of
 * updateDataElement and loadData.
 * *Add documentation as required.
 * *Remove console debug statements
 * *This is just an example so the rest doesn't matter much, (the rest being
 * changing the render() function, etc.).
 */
@customElement("renderer-template")
class Renderer extends LitElement {

  person: Person = new Person();

  @property({type: String})
  dataElementJSON = '';

  static styles = css`
    h1 {
      color: blue;
      text-transform: uppercase;
    }
  `;

  constructor() {
    super();
  }

  loadData() {
    this.person = <Person> JSON.parse(this.dataElementJSON);
  }

  /**
   * Create an updater method for updating the objects field on form events.
   * @param obj holding object of field
   * @param field field for which an updater is generated
   * @returns updater method
   */
  fieldUpdater(obj: object, field: string):
      (e: {target: HTMLInputElement}) => void
  {
    let that = this;
    return function(e: {target: HTMLInputElement}) {
      if (typeof Reflect.get(obj, field) === 'number') {
        Reflect.set(obj, field, Number(e.target.value))
      } else if (typeof Reflect.get(obj, field) === 'string') {
        Reflect.set(obj, field, e.target.value);
      } else if (typeof Reflect.get(obj, field) === 'boolean') {
        Reflect.set(obj, field, e.target.checked);
      }
      that.dataElementJSON = JSON.stringify(that.person);
      that.dispatchEvent(new CustomEvent(
        'data-changed',
        {bubbles: true, composed: true, detail: e.target.value}
      ));
    };
  }

  /**
   * Create input form element for the given field.
   * @param obj holding object of field
   * @param field field for which input is generated
   * @returns html template result
   */
  fieldInput(obj: object, field: string): TemplateResult {
    if (typeof Reflect.get(obj, field) === 'boolean') {
      return html`
        <vaadin-checkbox
          value="${field}"
          ?checked=${Reflect.get(obj, field)}
          @change=${this.fieldUpdater(obj, field)}
        >${field}</vaadin-checkbox>
      `;
    } else {
      return html`
        <vaadin-text-field
          label="${field}"
          .value=${Reflect.get(obj, field)}
          @input=${this.fieldUpdater(obj, field)}
        ></vaadin-text-field>
      `;
    }
  }

  /**
   * Create a form for the passed DataElement.
   *
   * In this experiment, forms are generated by inspecting the data element.
   * In the future, we hope to generate these forms directly from the DataElement
   * Spec classes during Annotation Processing.
   * @param element element for which a form will be generated
   * @returns form html
   */
  dataElementForm(element: DataElement): TemplateResult {
    let form = html``;
    for (let field in element) {
      form = html`${form}${this.fieldInput(element, field)}`;
    }
   return form;
  }

  /**
   * Render this LitElement.
   */
  render() {
    return html`
      <script>${this.loadData()}</script>
      <h1>Greetings ${this.person.age} year old ${this.person.firstName}!</h1>

      <div>
        ${this.dataElementForm(this.person)}
      </div>

      <pre>${JSON.stringify(this.person, null, 2)}</pre>
    `;
  }
}